// Large LCD controler
// the LCD with 3 line (money, liter, price)
#pragma once
#include <./global.h>
#include <./defines.h>
#include <./Keyboard.h>

#    define LCD_VCLK_PORT PORTA
#    define LCD_VDAT_PORT PORTA
#    define LCD_VRST_PORT PORTA
#    define LCD_VCLK PA5 // CLK of MainLCD
#    define LCD_VDAT PA6 // DATA of MainLCD
#    define LCD_VRST PA7 // RESET of MainLCD

void LCD_ByNumber(uint8_t i8number);

//  LCD 8
void LCD8_ClearSTB();
void LCD8_SetSTB();
void LCD8_PulseSTB();

void ClearLine(uint8_t line)
{
    uint8_t i;
    switch (line)
    {
        case MONEY_LINE:
        {
            for (i = 0; i < 10; i++)
            {
                MainDisplay[i] = 0x00;
            }
        }
        break;
        case LITER_LINE:
        {
            for (i = 10; i < 20; i++)
            {
                MainDisplay[i] = 0x00;
            }
        }
        break;
        case PRICE_LINE:
        {
            for (i = 20; i < 30; i++)
            {
                MainDisplay[i] = 0x00;
            }
        }
        break;
    }
}

void LCD8_ClearSTB()
{
    PORTA |= _BV(LCD_VRST); // digitalWrite(LCD_VRST, 1);
    delay_us(10);
}
void LCD8_SetSTB()
{
    PORTA &= ~_BV(LCD_VRST); // digitalWrite(LCD_VRST, 0);
    delay_us(10);
}
void LCD8_PulseSTB()
{
    PORTA &= ~_BV(LCD_VRST); // digitalWrite(LCD_VRST, 0);
    delay_us(10);
    PORTA |= _BV(LCD_VRST); // digitalWrite(LCD_VRST, 1);
    delay_us(10);
}

void SetMainLCDData_V8(uint8_t Data)
{
    uint8_t i, Mask = 0x01;
    for (i = 0; i < 8; i++)
    {
        LCD_VCLK_PORT |= _BV(LCD_VCLK);
        delay_us(10);
        if (Mask & Data)
            LCD_VDAT_PORT &= ~_BV(LCD_VDAT);
        else
            LCD_VDAT_PORT |= _BV(LCD_VDAT);
        delay_us(10);
        LCD_VCLK_PORT &= ~_BV(LCD_VCLK);
        delay_us(10);
        Data = Data >> 1;
    }
    delay_us(10);
}

void SetMainLCDData_V11(uint8_t Data)
{
    uint8_t i, iMask = 0x40;
    for (i = 0, iMask = 0x40; i < 7; i++, iMask = (iMask >> 1))
    {
        LCD_VCLK_PORT &= ~_BV(LCD_VCLK);
        if (iMask & Data)
            LCD_VDAT_PORT |= _BV(LCD_VDAT);
        else
            LCD_VDAT_PORT &= ~_BV(LCD_VDAT);
        LCD_VCLK_PORT |= _BV(LCD_VCLK);
    }
}

//  Init functions
// V8
void InitMainLCD_V8()
{
    uint8_t i;
    LCD_VRST_PORT &= ~_BV(LCD_VRST);
    LCD_VCLK_PORT &= ~_BV(LCD_VCLK);

    delay_us(10);
    LCD8_ClearSTB();
    SetMainLCDData_V8(COMMAND2);
    LCD8_PulseSTB();
    SetMainLCDData_V8(COMMAND3);

    for (i = 0; i < 36; i++)
    {
        SetMainLCDData_V8(0x00);
    }

    LCD8_PulseSTB();
    SetMainLCDData_V8(COMMAND5);
    LCD8_PulseSTB();
    SetMainLCDData_V8(COMMAND4);
    LCD8_SetSTB();
}

//  V9, V11, V12
void InitMainLCD_V9_V11_V12()
{
    for (uint8_t i = 0; i < 30; i++)
    {
        MainDisplay[i] = 0x00;
    }
    PORTA &= ~_BV(LCD_VRST); // digitalWrite(LCD_VRST, 0);
}

//  Show functions
void ShowMainLCD_V8()
{
    int8_t i;
    LCD8_ClearSTB();
    SetMainLCDData_V8(COMMAND5);
    LCD8_PulseSTB();
    SetMainLCDData_V8(COMMAND2);
    LCD8_PulseSTB();
    SetMainLCDData_V8(COMMAND3);

    for (i = 0; i < 6; i++)
    {
        // PricePerOneLit
        SetMainLCDData_V8(MainDisplay[24 + i]);
        SetMainLCDData_V8(0);
        SetMainLCDData_V8(0);
    }

    for (i = 0; i < 6; i++)
    {
        SetMainLCDData_V8(MainDisplay[19 - i]); // Lit
        SetMainLCDData_V8(MainDisplay[9 - i]);  // Money
        SetMainLCDData_V8(0);
    }

    LCD8_PulseSTB();
    SetMainLCDData_V8(COMMAND4);
    LCD8_SetSTB();
    delay_us(20);
}
void ShowMainLCD_V9()
{
    SetMainLCDData_V11(showLCDBackLight); // backlight

    SetMainLCDData_V11(LCD9_DotsL); // dot points
    SetMainLCDData_V11(LCD9_DotsH); // dot points

    // PricePerOneLit
    SetMainLCDData_V11(MainDisplay[29]);
    SetMainLCDData_V11(MainDisplay[28]);
    SetMainLCDData_V11(MainDisplay[27]);
    SetMainLCDData_V11(MainDisplay[26]);
    SetMainLCDData_V11(MainDisplay[25]);
    SetMainLCDData_V11(MainDisplay[24]);
    SetMainLCDData_V11(MainDisplay[23]);

    // liter line
    SetMainLCDData_V11(MainDisplay[19]);
    SetMainLCDData_V11(MainDisplay[18]);
    SetMainLCDData_V11(MainDisplay[17]);
    SetMainLCDData_V11(MainDisplay[16]);
    SetMainLCDData_V11(MainDisplay[15]);
    SetMainLCDData_V11(MainDisplay[14]);
    SetMainLCDData_V11(MainDisplay[13]);

    // money line
    SetMainLCDData_V11(MainDisplay[9]);
    SetMainLCDData_V11(MainDisplay[8]);
    SetMainLCDData_V11(MainDisplay[7]);
    SetMainLCDData_V11(MainDisplay[6]);
    SetMainLCDData_V11(MainDisplay[5]);
    SetMainLCDData_V11(MainDisplay[4]);
    SetMainLCDData_V11(MainDisplay[3]);

    LCD_VRST_PORT &= ~_BV(LCD_VRST);
    delay_us(20);
    LCD_VRST_PORT |= _BV(LCD_VRST);
    delay_us(20);
    LCD_VRST_PORT &= ~_BV(LCD_VRST);
    delay_us(20);
    LCD_VCLK_PORT &= ~_BV(LCD_VCLK);
}
void ShowMainLCD_V11()
{
    SetMainLCDData_V11(showLCDBackLight); // backlight
    SetMainLCDData_V11(LCD11_Dots);       // dot points

    // PricePerOneLit
    SetMainLCDData_V11(MainDisplay[29]);
    SetMainLCDData_V11(MainDisplay[28]);
    SetMainLCDData_V11(MainDisplay[27]);
    SetMainLCDData_V11(MainDisplay[26]);
    SetMainLCDData_V11(MainDisplay[25]);
    SetMainLCDData_V11(MainDisplay[24]);

    // liter line
    SetMainLCDData_V11(MainDisplay[19]);
    SetMainLCDData_V11(MainDisplay[18]);
    SetMainLCDData_V11(MainDisplay[17]);
    SetMainLCDData_V11(MainDisplay[16]);
    SetMainLCDData_V11(MainDisplay[15]);
    SetMainLCDData_V11(MainDisplay[14]);
    SetMainLCDData_V11(MainDisplay[13]);
    SetMainLCDData_V11(MainDisplay[12]);

    // money line
    SetMainLCDData_V11(MainDisplay[9]);
    SetMainLCDData_V11(MainDisplay[8]);
    SetMainLCDData_V11(MainDisplay[7]);
    SetMainLCDData_V11(MainDisplay[6]);
    SetMainLCDData_V11(MainDisplay[5]);
    SetMainLCDData_V11(MainDisplay[4]);
    SetMainLCDData_V11(MainDisplay[3]);
    SetMainLCDData_V11(MainDisplay[2]);

    LCD_VRST_PORT &= ~_BV(LCD_VRST);
    delay_us(20);
    LCD_VRST_PORT |= _BV(LCD_VRST);
    delay_us(20);
    LCD_VRST_PORT &= ~_BV(LCD_VRST);
    delay_us(20);
    LCD_VCLK_PORT &= ~_BV(LCD_VCLK);
}
void ShowMainLCD()
{
    switch (LCD_Version)
    {
        case 8:
            ShowMainLCD_V8();
            break;
        case 9:
        case 12:
            ShowMainLCD_V9();
            break;
        case 11:
            ShowMainLCD_V11();
            break;
    }
}

void setup_LCD1()
{
    switch (LCD_Version)
    {
        case 8:
            InitMainLCD_V8();
            break;
        case 9:
        case 11:
        case 12:
            InitMainLCD_V9_V11_V12();
            break;
    }
}

void CheckLcd(bool bNewChip, bool CheckLCD09)
{
    LCD9_DotsH = bNewChip ? 0x00 : 0xFF;
    LCD9_DotsL = bNewChip ? 0x00 : 0xFF;
    LCD11_Dots = bNewChip ? 0x00 : 0xFF;

    if (CheckLCD09)
    {
        for (uint8_t i = 0; i < 10; i++)
        {
            for (uint8_t j = 0; j < sizeof(MainDisplay); j++)
            {
                MainDisplay[j] = MainLCDCodeTable[i] | (bNewChip ? 0x00 : LCD8_DP);
            }
            for (uint8_t k = 0; k < sizeof(KeyboardDisplay); k++)
            {
                KeyboardDisplay[k] = GetKeyboardNumb(i) | (bNewChip ? 0x00 : KB89_DP);
            }

            ShowMainLCD();
            ShowKeyboardLcdNoC();

            delay_ms(CHECK_LCD_STEP_TIME);
        }
    }

    KeyboardDisplay[8] = 0x00;
    KeyboardDisplay[9] = 0x00;
    LCD9_DotsH = 0x00;
    LCD9_DotsL = 0x00;
    LCD11_Dots = 0x00;
}

void HEX_BCDFunc(uint32_t i32Hex, uint8_t i8line)
{
    uint32_t TempHex;
    uint8_t i, mul = 0;
    uint8_t characterCounts = 0;
    uint8_t BCD[10], KB_BCD[10];

    uint8_t bLCD8_LiterOver_999999 = (i8line == LITER_LINE && i32Hex >= NUMBER_1M && LCD_Version == 8);
    if (bLCD8_LiterOver_999999 || (LLine_Step == 2 && i8line == LITER_LINE))
        i32Hex /= 10;

    // trim number
    if (i8line == MONEY_LINE)
    {
        if (LCD_Version == 8)
        {
            if (i32Hex >= NUMBER_1B)
            {
                mul = 1;
                i32Hex /= NUMBER_10K;
            }
            else if (i32Hex >= NUMBER_100M)
            {
                i32Hex /= 1000;
            }
            else if (i32Hex >= NUMBER_10M)
            {
                i32Hex /= 100;
                mul = 2;
            }
            else if (i32Hex >= NUMBER_1M)
            {
                i32Hex /= 10;
                mul = 1;
            }
        }
        else if (LCD_Version == 9 || LCD_Version == 12)
        {
            if (i32Hex >= NUMBER_1B)
            {
                i32Hex /= NUMBER_1K;
            }
            else if (i32Hex >= NUMBER_100M)
            {
                mul = 2;
                i32Hex /= 100;
            }
            else if (i32Hex >= NUMBER_10M)
            {
                mul = 1;
                i32Hex /= 10;
            }
        }
        else if (LCD_Version == 11)
        {
            if (i32Hex >= NUMBER_100M)
            {
                i32Hex /= NUMBER_1K;
            }
        }
    }

    // Begin map
    for (i = 0; i < 10; i++)
    {
        BCD[i] = KB_BCD[i] = 0x00;
    }

    if (i8line == LITER_LINE)
    {
        i = LLine_Step == 2 ? 7 : 6;
        for (; i < 10; i++)
        {
            BCD[i] = MainLCDCodeTable[0];
            KB_BCD[i] = GetKeyboardNumb(0);
        }
    }

    TempHex = i32Hex;

    i = 9;
    do
    {
        BCD[i] = MainLCDCodeTable[TempHex % 10];
        KB_BCD[i] = GetKeyboardNumb(TempHex % 10);
        TempHex /= 10;
        i--;
        characterCounts++;
    } while (TempHex > 0);

    if (i8line == MONEY_LINE)
    {
        for (i = 0; i < 10; i++)
        {
            MainDisplay[9 - i] = BCD[9 - i];
        }

        if (LCD_Version == 8)
        {
            if (mul == 0)
            {
                MainDisplay[6] |= (i32Hex >= NUMBER_1K) ? LCD8_DP : 0;
            }
            else if (mul == 1)
            {
                MainDisplay[4] |= LCD8_DP;
                MainDisplay[7] |= LCD8_DP;
            }
            else if (mul == 2)
            {
                MainDisplay[5] |= LCD8_DP;
                MainDisplay[8] |= LCD8_DP;
            }
        }
        else if (LCD_Version == 9 || LCD_Version == 12)
        {
            LCD9_DotsH &= ~(0x01 | 0x02 | 0x04 | 0x08 | 0x010 | 0x20); // clear dots in first row

            if (mul == 0)
            {
                LCD9_DotsH |= (i32Hex >= NUMBER_1K) ? 0x08 : 0;
                LCD9_DotsH |= (i32Hex >= NUMBER_1M) ? 0x01 : 0;
            }
            else if (mul == 1)
            {
                LCD9_DotsH |= 0x10;
                LCD9_DotsH |= 0x02;
            }
            else if (mul == 2)
            {
                LCD9_DotsH |= 0x20;
                LCD9_DotsH |= 0x04;
            }
        }
        else if (LCD_Version == 11)
        {
            LCD11_Dots &= ~(0x01 | 0x02); // clear dots in first row
            LCD11_Dots |= (i32Hex >= NUMBER_1K) ? 0x01 : 0;
            LCD11_Dots |= (i32Hex >= NUMBER_1M) ? 0x02 : 0;
        }

        ShowMainLCD();
    }

    if (i8line == LITER_LINE)
    {
        for (i = 0; i < 10; i++)
        {
            MainDisplay[19 - i] = BCD[9 - i];
        }

        if (LCD_Version == 8)
        {
            if (bLCD8_LiterOver_999999)
            {
                MainDisplay[13] |= LCD8_DP;
            }

            if (LLine_Step == 2)
                MainDisplay[17] |= LCD8_DP;
            else
                MainDisplay[16] |= LCD8_DP;
        }
        else if (LCD_Version == 9 || LCD_Version == 12)
        {
            if (LLine_Step == 2)
                LCD9_DotsL |= 0x01;
            else
                LCD9_DotsH |= 0x40;
        }
        else if (LCD_Version == 11)
        {
            if (LLine_Step == 2)
                LCD11_Dots |= 0x04;
            else
                LCD11_Dots |= 0x08;
        }

        ShowMainLCD();
    }

    if (i8line == PRICE_LINE)
    {
        for (i = 0; i < 10; i++)
        {
            MainDisplay[29 - i] = BCD[9 - i];
        }

		MainDisplay[26] &= ~(LCD8_DP);
		LCD9_DotsL &= ~(0x04);
		LCD11_Dots &= ~(0x20);
        ShowMainLCD();
    }

    if (i8line == VFD_LINE)
    {
        if (PumpMode == ecPM::VIEWING_TOTAL_NUMBER)
        {
            for (i = 0; i < 6; i++)
            {
                KeyboardDisplay[7 - i] = KB_BCD[9 - i];
            }
        }
        else
        {
            for (i = 0; i < 7; i++)
            {
                KeyboardDisplay[7 - i] = KB_BCD[9 - i];
            }
            if (i32Hex >= NUMBER_1M)
            {
                KeyboardDisplay[1] |= KB89_DP;
                KeyboardDisplay[4] |= KB89_DP;
            }
            else if (i32Hex >= NUMBER_1K)
            {
                KeyboardDisplay[1] &= ~(KB89_DP);
                KeyboardDisplay[4] |= KB89_DP;
            }
            else
            {
                KeyboardDisplay[1] &= ~(KB89_DP);
                KeyboardDisplay[4] &= ~(KB89_DP);
            }
        }
    }
}

void HEX_MLP()
{
	HEX_BCDFunc(LastMoney, MONEY_LINE);
	HEX_BCDFunc(LastLiter, LITER_LINE);
    HEX_BCDFunc(LastPrice, PRICE_LINE);
}

#if BUILD_CONFIG_FLASH_ON_START == 1
void ResetMainLCD(int miliSecconds)
{
    for (uint8_t i = 0; i < 30; i++)
    {
        MainDisplay[i] = 0x7F;
    }
    ShowMainLCD();
    delay_ms(miliSecconds);
}
#endif
